import telebot
import pymongo
import config, func, dic, kbd


bot = telebot.TeleBot(config.BOT_TOKEN, skip_pending = True)


# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MongoDB
db_client = pymongo.MongoClient("mongodb+srv://nasuamba:Sokol366@myfirstcluster.znekeok.mongodb.net/test")
db = db_client["CheckList_PZD_KO"] # –ë–î
c = db["Users"] # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
c_CheckLists = db["CheckLists"] # —á–µ–∫ –ª–∏—Å—Ç—ã
c_CheckBoxes = db["CheckBoxes"] # —á–µ–∫ –±–æ–∫—Å—ã


@bot.message_handler(commands = ["start"])
def start(message):

    mess = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    bot.send_message(message.from_user.id, mess, reply_markup = kbd.welcome)


# —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
comand_list = {'/start': start} 


@bot.callback_query_handler(func=lambda call: call.data.startswith('welcome'))
def verification(call):

    if call.data in comand_list: comand_list[call.data](call) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    elif call.data.split('|')[1] == '—á–µ–∫ –ª–∏—Å—Ç—ã':
        if c.find_one({'user_id': call.from_user.id}) == None:
            mess = f'–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.profile_create)
        else:
            mess = f'–≤–∞—à–∏ –ß–µ–∫ –õ–∏—Å—Ç—ã'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.active_CL(call.from_user.id))
    elif call.data.split('|')[1] == '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
        if c.find_one({'user_id': call.from_user.id}) == None:
            mess = f'–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.profile_create)
        else:
            mess = func.PROFILE_SHOW(call.from_user.id)
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.Profile_show())


@bot.callback_query_handler(func = lambda call: call.data.startswith('role'))
def get_role(call):
    
    if call.data in comand_list: comand_list[call.data](call) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    else:
        role = call.data.split('|')[1]
        func.DB_EDIT(c, 'user_id', call.from_user.id, '—Ä–æ–ª—å', role)
        if c.find_one({'user_id': call.from_user.id}, {'user_id': 0, '_id': 0, '—Ä–æ–ª—å': 0, '—Ç–µ–ª–µ—Ñ–æ–Ω': 0, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': 0}) == {}:
            mess = f'–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {role}' \
                   f'\n' \
                   f'\n–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?' \
                   f'\n' \
                   f'\n‚ùó –í–≤–µ–¥–∏—Ç–µ –§–ò–û' \
                   f'\nüí° –û–±—Ä–∞–∑–µ—Ü: –ü—É—Ç–∏–Ω –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
            bot.send_message(call.from_user.id, mess)
            bot.register_next_step_handler(call.message, get_name)
        else:
            mess = func.PROFILE_SHOW(call.from_user.id)
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.Profile_show())


@bot.message_handler()
def get_name(message):
    
    if message.text in comand_list: comand_list[message.text](message) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    else:
        if len(message.text.split(' ')) == 3:
            name = message.text
            func.DB_EDIT(c, 'user_id', message.from_user.id, '–§–ò–û', name)
            if c.find_one({'user_id': message.from_user.id}, {'user_id': 0, '_id': 0, '—Ä–æ–ª—å': 0, '–§–ò–û': 0, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': 0}) == {}:
                mess = f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {c.find_one({'user_id': message.from_user.id}, {'user_id': 0, '_id': 0, '–§–ò–û': 0, '—Ç–µ–ª–µ—Ñ–æ–Ω': 0, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': 0})['—Ä–æ–ª—å']}" \
                       f'\n–§–ò–û: {name}' \
                       f'\n' \
                       f'\n–ö–∞–∫ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?' \
                       f'\n' \
                       f'\n‚ùó –í–≤–µ–¥–∏—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä' \
                       f'\nüí° –û–±—Ä–∞–∑–µ—Ü: +79111175131'
                bot.send_message(message.from_user.id, mess)
                bot.register_next_step_handler(message, get_phone)
            else:
                mess = func.PROFILE_SHOW(message.from_user.id)
                bot.send_message(message.from_user.id, mess, reply_markup = kbd.Profile_show())
        else:
            mess = f'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥' \
                   f'\nüí° –û–±—Ä–∞–∑–µ—Ü: –ü—É—Ç–∏–Ω –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
            bot.send_message(message.from_user.id, mess)
            bot.register_next_step_handler(message, get_name)


def get_phone(message):

    if message.text in comand_list: comand_list[message.text](message) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    else:
        if len(message.text) == 12 and message.text[1:].isdigit():
            func.DB_EDIT(c, 'user_id', message.from_user.id, '—Ç–µ–ª–µ—Ñ–æ–Ω', message.text)
            if c.find_one({'user_id': message.from_user.id}, {'user_id': 0, '_id': 0, '—Ä–æ–ª—å': 0, '–§–ò–û': 0, '—Ç–µ–ª–µ—Ñ–æ–Ω': 0}) == {}:
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:\n'
                for i in dic.units.items():
                    if i[0] == 14: mess += '\n'
                    mess += f'\n{i[0]}. {i[1]}'
                bot.send_message(message.from_user.id, mess, reply_markup = kbd.unit)
            else:
                mess = func.PROFILE_SHOW(message.from_user.id)
                bot.send_message(message.from_user.id, mess, reply_markup = kbd.Profile_show())
        else:
            mess = f'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥' \
                   f'\nüí° –û–±—Ä–∞–∑–µ—Ü: +79111175131'
            bot.send_message(message.from_user.id, mess)
            bot.register_next_step_handler(message, get_phone)


@bot.callback_query_handler(func=lambda call: call.data.startswith('unit'))
def get_unit(call):

    if call.data in comand_list: comand_list[call.data](call) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    else:
            func.DB_EDIT(c, 'user_id', call.from_user.id, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', dic.units[int(call.data.split('|')[1])])
            mess = func.PROFILE_SHOW(call.from_user.id)
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.Profile_show())


@bot.callback_query_handler(func=lambda call: call.data.startswith('set'))
def profile_settings(call):
    if call.data in comand_list: comand_list[call.data](call) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    else:
        if call.data.split('|')[1] == 'edit profile':
            mess = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.profile_set)

        elif call.data.split('|')[1] == 'role':
            mess = f'–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É —Ä–æ–ª—å'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.role)

        elif call.data.split('|')[1] == 'name':
            mess = f'\n–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?' \
                   f'\n' \
                   f'\n‚ùó –í–≤–µ–¥–∏—Ç–µ –§–ò–û' \
                   f'\nüí° –û–±—Ä–∞–∑–µ—Ü: –ü—É—Ç–∏–Ω –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
            bot.send_message(call.from_user.id, mess)
            bot.register_next_step_handler(call.message, get_name)

        elif call.data.split('|')[1] == 'phone':
            mess = f'\n–ö–∞–∫ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?' \
                   f'\n' \
                   f'\n‚ùó –í–≤–µ–¥–∏—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä' \
                   f'\nüí° –û–±—Ä–∞–∑–µ—Ü: +79111175131'
            bot.send_message(call.from_user.id, mess)
            bot.register_next_step_handler(call.message, get_phone)

        elif call.data.split('|')[1] == 'unit':
            mess = '–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:\n'
            for i in dic.units.items():
                if i[0] == 14: mess += '\n'
                mess += f'\n{i[0]}. {i[1]}'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.unit)

        elif call.data.split('|')[1] == 'close':
            mess = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.welcome)

        elif call.data.split('|')[1] == 'create':
            mess = f'–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É —Ä–æ–ª—å'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.role)

        elif call.data.split('|')[1] == 'delite profile':
            c.delete_one({'user_id': call.from_user.id})
            if c.find_one({'user_id': call.from_user.id}) == None: mess_1 = '‚úÖ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω'
            else: mess_1 = '–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'
            bot.send_message(call.from_user.id, mess_1)

            mess = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.welcome)
        
        elif call.data.split('|')[1] == 'RNP':
            mess = '–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–±–æ—Ä–∞ (–†–ù–ü)'
            bot.send_message(call.from_user.id, mess)
            bot.register_next_step_handler(call.message, change_RNP, call.data.split('|')[2])
        
        elif call.data.split('|')[1] == 'organizer':
            RNP = call.data.split('|')[2]
            mess = f'—É–∫–∞–∂–∏—Ç–µ –§–ò–û –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞' \
                   f'\n' \
                   f'\nüí° –û–±—Ä–∞–∑–µ—Ü: –ü—É—Ç–∏–Ω –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
            bot.send_message(call.from_user.id, mess)
            bot.register_next_step_handler(call.message, get_organizer, RNP)
        
        elif call.data.split('|')[1] == 'initiator':
            RNP = call.data.split('|')[2]
            mess = f'—É–∫–∞–∂–∏—Ç–µ –§–ò–û –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞' \
                   f'\n' \
                   f'\nüí° –û–±—Ä–∞–∑–µ—Ü: –ü—É—Ç–∏–Ω –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
            bot.send_message(call.from_user.id, mess)
            bot.register_next_step_handler(call.message, get_initiator, RNP)


@bot.callback_query_handler(func=lambda call: call.data.startswith('CheckList'))
def CheckList_menu(call):

    if call.data in comand_list: comand_list[call.data](call) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    
    elif call.data.split('|')[1] == 'create':
        if c.find_one({'user_id': call.from_user.id}) == None:
            mess = '–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–µ–∫ –ª–∏—Å—Ç–∞–º'
            bot.send_message(call.from_user.id, mess, reply_markup = kbd.profile_create)
        else:
            mess = '–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–±–æ—Ä–∞ (–†–ù–ü)'
            bot.send_message(call.from_user.id, mess)
            bot.register_next_step_handler(call.message, get_RNP)

    elif call.data.split('|')[1] == 'open':
        RNP = call.data.split('|')[2]
        # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞. –∫–ª—é—á - —Ä–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–µ–∫ –ª–∏—Å—Ç–∞ (–†–ù–ü)
        if c_CheckBoxes.find_one({'–†–ù–ü': RNP}) == None:
            dic.docs_dict[RNP] = {i: False for i in dic.docs_lst}
            dic.docs_dict[RNP]['–†–ù–ü'] = RNP
            dic.docs_dict[RNP]['creator_id'] = call.from_user.id
            c_CheckBoxes.insert_one(dic.docs_dict[RNP])

        mess = f'‚úÖ –æ—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏\n\n*—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∞–≥–µ - –≤—ã–±–µ—Ä–∏ –µ–≥–æ –≤ –ª–µ–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ'
        bot.send_message(call.from_user.id, mess, parse_mode = "HTML", reply_markup = kbd.ChekBox(RNP))

    elif call.data.split('|')[1] == 'delite CheckList':
        RNP = call.data.split('|')[2]
        c_CheckLists.delete_one({'–†–ù–ü': RNP})
        c_CheckBoxes.delete_one({'–†–ù–ü': RNP})
        if c_CheckLists.find_one({'–†–ù–ü': RNP}) == None: mess_1 = '‚úÖ —á–µ–∫ –ª–∏—Å—Ç —É–¥–∞–ª–µ–Ω'
        else: mess_1 = '–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ–∫ –ª–∏—Å—Ç. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'
        bot.send_message(call.from_user.id, mess_1)

        mess = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        bot.send_message(call.from_user.id, mess, reply_markup = kbd.welcome)

    elif call.data.split('|')[1] == 'doc':
        RNP = call.data.split('|')[2]
        mess = func.CHECK_LIST_SHOW(RNP)
        bot.send_message(call.from_user.id, mess, reply_markup = kbd.CL_show(RNP))
    
    elif call.data.split('|')[1] == 'edit':
        RNP = call.data.split('|')[2]
        mess = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ß–µ–∫ –õ–∏—Å—Ç–∞'
        bot.send_message(call.from_user.id, mess, reply_markup = kbd.CL_edit(RNP))
    
    elif call.data.split('|')[1] == 'close':
        RNP = call.data.split('|')[2]
        mess = func.CHECK_LIST_SHOW(RNP)
        bot.send_message(call.from_user.id, mess, reply_markup = kbd.CL_show(RNP))


@bot.message_handler()
def get_RNP(message):
    if message.text in comand_list: comand_list[message.text](message) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    else:
        RNP = message.text

        # –µ—Å–ª–∏ –ß–µ–∫ –õ–∏—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –≤ –ë–î
        if c_CheckLists.find_one({'–†–ù–ü': RNP}) == None:

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω
            if c.find_one({'user_id': message.from_user.id}, {'user_id': 0, '_id': 0, '–§–ò–û': 0, '—Ç–µ–ª–µ—Ñ–æ–Ω': 0, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': 0}) == {}:
                mess = '–≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ–ª—å'
                bot.send_message(message.from_user.id, mess)
                mess = func.PROFILE_SHOW(message.from_user.id)
                bot.send_message(message.from_user.id, mess, reply_markup = kbd.profile_set)

            # –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
            elif c.find_one({'user_id': message.from_user.id})['—Ä–æ–ª—å'] == '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
                c_CheckLists.insert_one({'–†–ù–ü': RNP, '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä': c.find_one({'user_id': message.from_user.id})['–§–ò–û'], 'creator_id': message.from_user.id})
                mess = f'—É–∫–∞–∂–∏—Ç–µ –§–ò–û –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞' \
                       f'\n' \
                       f'\nüí° –û–±—Ä–∞–∑–µ—Ü: –ü—É—Ç–∏–Ω –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
                bot.send_message(message.from_user.id, mess)
                bot.register_next_step_handler(message, get_initiator, RNP)

            # –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
            elif c.find_one({'user_id': message.from_user.id})['—Ä–æ–ª—å'] == '–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä':
                c_CheckLists.insert_one({'–†–ù–ü': RNP, '–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä': c.find_one({'user_id': message.from_user.id})['–§–ò–û'], 'creator_id': message.from_user.id})
                mess = f'—É–∫–∞–∂–∏—Ç–µ –§–ò–û –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞' \
                       f'\n' \
                       f'\nüí° –û–±—Ä–∞–∑–µ—Ü: –ü—É—Ç–∏–Ω –í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
                bot.send_message(message.from_user.id, mess)
                bot.register_next_step_handler(message, get_organizer, RNP)
        
        # –µ—Å–ª–∏ –ß–µ–∫ –õ–∏—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –µ—Å—Ç—å –≤ –ë–î
        else:
            name = c.find_one({'user_id': message.from_user.id})['–§–ò–û']

            if c_CheckLists.find_one({'–†–ù–ü': RNP})['–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä'] == name or c_CheckLists.find_one({'–†–ù–ü': RNP})['–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä'] == name:
                mess_1 = '—á–µ–∫ –ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º –†–ù–ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —É –≤–∞—Å —É–∫–∞–∑–∞–Ω–∞ –¥—Ä—É–≥–∞—è —Ä–æ–ª—å'
                bot.send_message(message.from_user.id, mess_1)
                mess_2 = func.CHECK_LIST_SHOW(RNP)
                bot.send_message(message.from_user.id, mess_2, reply_markup = kbd.CL_show(RNP))
            else:
                mess = '—á–µ–∫ –ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º –†–ù–ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞'
                bot.send_message(message.from_user.id, mess_1, reply_markup = kbd.back_to_main)


def change_RNP(message, RNP):
    func.DB_EDIT(c_CheckLists, '–†–ù–ü', RNP, '–†–ù–ü', message.text)
    func.DB_EDIT(c_CheckBoxes, '–†–ù–ü', RNP, '–†–ù–ü', message.text)
    mess = func.CHECK_LIST_SHOW(message.text)
    bot.send_message(message.from_user.id, mess, reply_markup = kbd.CL_show(message.text))


def get_initiator(message, RNP):
    func.DB_EDIT(c_CheckLists, '–†–ù–ü', RNP, '–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä', message.text)
    mess = func.CHECK_LIST_SHOW(RNP)
    bot.send_message(message.from_user.id, mess, reply_markup = kbd.CL_show(RNP))


def get_organizer(message, RNP):
    func.DB_EDIT(c_CheckLists, '–†–ù–ü', RNP, '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä', message.text)
    mess = func.CHECK_LIST_SHOW(RNP)
    bot.send_message(message.from_user.id, mess, reply_markup = kbd.CL_show(RNP))


@bot.callback_query_handler(func=lambda call: call.data.startswith('back'))
def back(call):
    if call.data in comand_list: comand_list[call.data](call) # –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    elif call.data.split('|')[1] == 'back_to_main_menu':
        mess = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        bot.send_message(call.from_user.id, mess, reply_markup = kbd.welcome)


@bot.callback_query_handler(func=lambda call: call.data.startswith('ChekBox'))
def CheckBox(call):
    # —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —á–µ–∫–±–æ–∫—Å
    x = call.data.split('|')[1]
    RNP = call.data.split('|')[2]
    if x[:1] == '‚úÖ' or x[:1] == '‚ùå':
        # if dic.docs_dict[RNP][x[1:]]:
        if c_CheckBoxes.find_one({'–†–ù–ü': RNP})[x[1:]]:
            func.DB_EDIT(c_CheckBoxes, '–†–ù–ü', RNP, x[1:], False)
        else: func.DB_EDIT(c_CheckBoxes, '–†–ù–ü', RNP, x[1:], True)

        bot.edit_message_text(chat_id = call.message.chat.id,
                              text = f'‚úÖ –æ—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏\n\n*—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∞–≥–µ - –≤—ã–±–µ—Ä–∏ –µ–≥–æ –≤ –ª–µ–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ',
                              message_id = call.message.message_id,
                              parse_mode = "HTML",
                              reply_markup = kbd.ChekBox(RNP))

    
    elif x in dic.docs_lst:
        mess = dic.docs_info_dict[x]
        
        bot.edit_message_text(chat_id = call.message.chat.id,
                              text = mess,
                              message_id = call.message.message_id,
                              parse_mode = "HTML",
                              reply_markup = kbd.back_from_CheckBox(RNP))


    # –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
    elif x == 'back_to_main_menu':
        bot.edit_message_text(chat_id = call.message.chat.id,
                              text = f'‚úÖ –æ—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏\n\n*—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∞–≥–µ - –≤—ã–±–µ—Ä–∏ –µ–≥–æ –≤ –ª–µ–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ',
                              message_id = call.message.message_id,
                              parse_mode = "HTML",
                              reply_markup = kbd.ChekBox(RNP))

    
    elif x == 'back_to_CheckList':
        mess = func.CHECK_LIST_SHOW(RNP)
        bot.send_message(call.from_user.id, mess, reply_markup = kbd.CL_show(RNP))


if __name__ == '__main__':
    bot.polling(non_stop = True, interval = 0)