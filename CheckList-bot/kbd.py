from telebot import types
import dic, pymongo

# –û–ë–û–õ–û–ß–ö–ê

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MongoDB
db_client = pymongo.MongoClient("mongodb+srv://nasuamba:Sokol366@myfirstcluster.znekeok.mongodb.net/test")
db = db_client["CheckList_PZD_KO"] # –ë–î
c = db["Users"] # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
c_CheckLists = db["CheckLists"] # —á–µ–∫ –ª–∏—Å—Ç—ã
c_CheckBoxes = db["CheckBoxes"] # —á–µ–∫ –±–æ–∫—Å—ã


# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
welcome = types.InlineKeyboardMarkup(row_width = 1)
btn1 = types.InlineKeyboardButton('üìã —á–µ–∫ –ª–∏—Å—Ç—ã', callback_data = 'welcome|—á–µ–∫ –ª–∏—Å—Ç—ã')
btn2 = types.InlineKeyboardButton('üë§ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data = 'welcome|–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
welcome.add(btn1, btn2)


# –≤—ã–±–æ—Ä —Ä–æ–ª–∏
role = types.InlineKeyboardMarkup(row_width = 1)
btn1 = types.InlineKeyboardButton('üë®‚Äçüíª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä', callback_data = 'role|–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä')
btn2 = types.InlineKeyboardButton('üôã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä', callback_data = 'role|–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä')
role.add(btn1, btn2)

# –≤—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
unit = types.InlineKeyboardMarkup(row_width = 4)
for i in range(1, 20, 4):
    btn1 = types.InlineKeyboardButton(i, callback_data = f'unit|{i}')
    btn2 = types.InlineKeyboardButton(i+1, callback_data = f'unit|{i+1}')
    btn3 = types.InlineKeyboardButton(i+2, callback_data = f'unit|{i+2}')
    btn4 = types.InlineKeyboardButton(i+3, callback_data = f'unit|{i+3}')
    unit.add(btn1, btn2, btn3, btn4)


def Profile_show():

    keyboard = types.InlineKeyboardMarkup(row_width = 2)

    btn1 = types.InlineKeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥', callback_data = f'back|back_to_main_menu')
    btn2 = types.InlineKeyboardButton('‚úè —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data = f'set|edit profile')
    keyboard.add(btn1, btn2)

    return keyboard

    
# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
profile_set = types.InlineKeyboardMarkup(row_width = 1)
btn1 = types.InlineKeyboardButton('üë®‚Äçüíª –∏–∑–º–µ–Ω–∏—Ç—å –†–æ–ª—å', callback_data = 'set|role')
btn2 = types.InlineKeyboardButton('üë§ –∏–∑–º–µ–Ω–∏—Ç—å –§–ò–û', callback_data = 'set|name')
btn3 = types.InlineKeyboardButton('üìû –∏–∑–º–µ–Ω–∏—Ç—å –¢–µ–ª–µ—Ñ–æ–Ω', callback_data = 'set|phone')
btn4 = types.InlineKeyboardButton('üè´ –∏–∑–º–µ–Ω–∏—Ç—å –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', callback_data = 'set|unit')
btn5 = types.InlineKeyboardButton('‚ùå —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'set|delite profile')
btn6 = types.InlineKeyboardButton('‚úÖ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data = 'set|close')
profile_set.add(btn1, btn2, btn3, btn4, btn5, btn6)


# –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç
profile_create = types.InlineKeyboardMarkup(row_width = 1)
btn1 = types.InlineKeyboardButton('üë§ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'set|create')
btn2 = types.InlineKeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥', callback_data = 'back|back_to_main_menu')
profile_create.add(btn1, btn2)


# –Ω–∞–∑–∞–¥
back_to_main  = types.InlineKeyboardMarkup(row_width = 1)
btn1 = types.InlineKeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥', callback_data = 'back|back_to_main_menu')
back_to_main.add(btn1)


# —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ß–µ–∫ –õ–∏—Å—Ç–æ–≤
def active_CL(ID):
    
    keyboard = types.InlineKeyboardMarkup(row_width = 1)

    # –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
    if c.find_one({'user_id': ID}, {'user_id': 0, '_id': 0, '–§–ò–û': 0, '—Ç–µ–ª–µ—Ñ–æ–Ω': 0, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': 0})['—Ä–æ–ª—å'] == '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
        name = c.find_one({'user_id': ID}, {'user_id': 0, '_id': 0, '—Ä–æ–ª—å': 0, '—Ç–µ–ª–µ—Ñ–æ–Ω': 0, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': 0})['–§–ò–û']
        res = c_CheckLists.find({'–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä': name}, {'_id': 0, 'creator_id': 0})
        for doc in res:
            btn1 = types.InlineKeyboardButton(f'–†–ù–ü: {doc["–†–ù–ü"]}', callback_data = f'CheckList|doc|{doc["–†–ù–ü"]}')
            keyboard.add(btn1)
    # –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
    elif c.find_one({'user_id': ID}, {'user_id': 0, '_id': 0, '–§–ò–û': 0, '—Ç–µ–ª–µ—Ñ–æ–Ω': 0, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': 0})['—Ä–æ–ª—å'] == '–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä':
        name = c.find_one({'user_id': ID}, {'user_id': 0, '_id': 0, '—Ä–æ–ª—å': 0, '—Ç–µ–ª–µ—Ñ–æ–Ω': 0, '–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ': 0})['–§–ò–û']
        res = c_CheckLists.find({'–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä': name}, {'_id': 0, 'creator_id': 0})
        for doc in res:
            btn1 = types.InlineKeyboardButton(f'–†–ù–ü: {doc["–†–ù–ü"]}', callback_data = f'CheckList|doc|{doc["–†–ù–ü"]}')
            keyboard.add(btn1)

    btn1 = types.InlineKeyboardButton('‚ûï —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–∫ –ª–∏—Å—Ç', callback_data = 'CheckList|create')
    btn2 = types.InlineKeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥', callback_data = 'back|back_to_main_menu')
    keyboard.add(btn1, btn2)

    return keyboard


def CL_show(RNP):

    keyboard = types.InlineKeyboardMarkup(row_width = 2)

    btn1 = types.InlineKeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥', callback_data = f'back|back_to_main_menu|{RNP}')
    btn2 = types.InlineKeyboardButton('üÜó –æ—Ç–∫—Ä—ã—Ç—å', callback_data = f'CheckList|open|{RNP}')
    keyboard.add(btn1, btn2)
    btn3 = types.InlineKeyboardButton('‚úè —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data = f'CheckList|edit|{RNP}')
    keyboard.add(btn3)

    return keyboard


def CL_edit(RNP):

    keyboard = types.InlineKeyboardMarkup(row_width = 1)
    btn1 = types.InlineKeyboardButton('Ô∏èÔ∏è#Ô∏è‚É£ –∏–∑–º–µ–Ω–∏—Ç—å –†–ù–ü', callback_data = f'set|RNP|{RNP}')
    btn2 = types.InlineKeyboardButton('üë®‚Äçüíª –§–ò–û –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞', callback_data = f'set|organizer|{RNP}')
    btn3 = types.InlineKeyboardButton('üôã –§–ò–û –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', callback_data = f'set|initiator|{RNP}')
    btn4 = types.InlineKeyboardButton('‚ùå —É–¥–∞–ª–∏—Ç—å —á–µ–∫ –ª–∏—Å—Ç', callback_data = f'CheckList|delite CheckList|{RNP}')
    btn5 = types.InlineKeyboardButton('‚úÖ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data = f'CheckList|close|{RNP}')
    keyboard.add(btn1, btn2, btn3, btn4, btn5)

    return keyboard


# –ß–ï–ö –õ–ò–°–¢

def ChekBox(RNP):

    docs = types.InlineKeyboardMarkup(row_width = 2)
    for i in dic.docs_lst:
        btn1 = types.InlineKeyboardButton(i, callback_data = f'ChekBox|{i}|{RNP}')
        if c_CheckBoxes.find_one({'–†–ù–ü': RNP})[i]:
            btn2 = types.InlineKeyboardButton('‚úÖ', callback_data = f'ChekBox|‚úÖ{i}|{RNP}')
        else:
            btn2 = types.InlineKeyboardButton('‚ùå', callback_data = f'ChekBox|‚ùå{i}|{RNP}')
        docs.add(btn1, btn2)

    btn1 = types.InlineKeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥', callback_data = f'ChekBox|back_to_CheckList|{RNP}')
    docs.add(btn1)

    return docs

def back_from_CheckBox(RNP):
    keyboard  = types.InlineKeyboardMarkup(row_width = 1)
    btn1 = types.InlineKeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥', callback_data = f'ChekBox|back_to_main_menu|{RNP}')
    keyboard.add(btn1)

    return keyboard
