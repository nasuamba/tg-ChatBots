import telebot
import dic
import markup
import config
import os
import pandas as pd
from funcs import *

bot = telebot.TeleBot(config.BOT_TOKEN, skip_pending = True)


# –ü–û–î–î–ï–†–ñ–ö–ê
@bot.message_handler(commands = ["help"])
def help(message):
    mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üì®'
    bot.send_message(message.from_user.id, mess, reply_markup = markup.markup_clear)
    bot.register_next_step_handler(message, get_help_msg)


def get_help_msg(message):
    mess = f'–±–æ—Ç: @GPNS_mtr_bot\nuser id: {message.from_user.id}\n\n—Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}'
    to_chat_id = -1001528081284
    bot.send_message(to_chat_id, mess)

    mess = '—Å–ø–∞—Å–∏–±–æ üôè' \
           '\n–º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'
    bot.send_message(message.from_user.id, mess, reply_markup = markup.markup_clear)


# –í–´–ë–û–† –ê–¢–¢–ï–°–¢–ê–¶–ò–ò –ú–¢–†
@bot.message_handler(commands = ["start"])
def start(message):
    if not message.from_user.id in dic.main_user_dic:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ª–æ–≤–∞—Ä–∏
        dic.main_user_dic[message.from_user.id] = {i: '' for i in dic.main_user_dic_names}
        dic.main_user_dic[message.from_user.id]['user_id'] = message.from_user.id
        # —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        dic.VC_dic[message.from_user.id] = {}
        # —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        dic.DC_dic[message.from_user.id] = {}
        # —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        dic.check_dic[message.from_user.id] = {}
        # —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ú–¢–† –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        dic.check_box_dic[message.from_user.id] = {}

        mess = f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.first_name}!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –ú–¢–†'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.insp_num)
        bot.register_next_step_handler(message, get_ins_num)


# —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
comand_list = {'/start': start, '/help': help}


# –í–í–û–î –ò–ú–ï–ù–ò
def get_ins_num(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Å–ø–µ–∫—Ü–∏—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    elif config.is_part_in_list(message.text, dic.ins_lst):
        dic.main_user_dic[message.from_user.id]['table'] = f'mtr_inspection_{message.text}'

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å—ã –ø–æ –≤—ã–±—Ä–∞–Ω–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –ú–¢–† –Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î
        all_check_box_create(message.from_user.id)

        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü—É—Ç–∏–Ω –í.–í."'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.bck_to_insp_num)
        bot.register_next_step_handler(message, get_name)
    else:
        mess = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.insp_num)
        bot.register_next_step_handler(message, get_ins_num)


# –í–´–ë–û–† –û–ë–™–ï–ö–¢–ê –ú–¢–†
def get_name(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å–ø–µ–∫—Ü–∏–∏':
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –ú–¢–†'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.insp_num)
        bot.register_next_step_handler(message, get_ins_num)
    else:
        if message.text != '‚¨Ö –Ω–∞–∑–∞–¥' and message.text != '–¥–∞–ª–µ–µ ‚û°Ô∏è':
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dic.main_user_dic[message.from_user.id]['user_name'] = message.text

        mtr_check_box_create(message.from_user.id, bot)
        bot.register_next_step_handler(message, get_objekt)


# –í–´–ë–û–† –ü–†–û–í–ï–†–ö–ò (–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ)
def get_objekt(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == 'üìÑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç':
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º Excel –æ—Ç—á–µ—Ç
        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        # c = db.cursor()
        path_file = f"{message.from_user.id}/–∞–∫—Ç –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –ú–¢–†.xlsx"
        if not str(message.from_user.id) in os.listdir():
            os.mkdir(str(message.from_user.id))
        with pd.ExcelWriter(path_file) as writer:
            doc = pd.read_sql(f"""SELECT user_name, mtr_objekt, VC, DC, sklad, doc_date_from, doc_date_to, VCP,
                              DCP FROM {dic.main_user_dic[message.from_user.id]['table']}""", db)
            doc.to_excel(writer, sheet_name = "–æ—Ç—á–µ—Ç", header = dic.hdr, index = False)
            sn = writer.sheets['–æ—Ç—á–µ—Ç']
            for i, j in {'A': 20, 'B': 60, 'C': 70, 'D': 50, 'E': 25, 'F': 15, 'G': 15, 'H': 35, 'I': 35}.items():
                sn.column_dimensions[i].width = j

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            mess = '–ó–∞–ø–∏—Å—å –≤ –∞–∫—Ç–µ —Å–æ–∑–¥–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ!'
            bot.send_message(message.from_user.id, mess, reply_markup = markup.markup_clear)

            # if not str(message.from_user.id) in os.listdir():
            #     os.mkdir(str(message.from_user.id))

            writer.save()

        db.close()

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel –≤ —á–∞—Ç
        with open(path_file, "rb") as file_send:
            bot.send_document(message.from_user.id, file_send)


    elif config.is_part_in_list(message.text[2:], mtr_objekt_lst) == True:
        # –æ—Ç—Ä–µ–∑–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞ (–º–∞—Ä–∫–µ—Ä + –ø—Ä–æ–±–µ–ª) –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['mtr_objekt'] = message.text[2:]

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –æ–±—ä–µ–∫—Ç—É
        c.execute(
            f"""SELECT VC, VCP, sklad FROM {dic.main_user_dic[message.from_user.id]['table']} WHERE mtr_objekt = ?""",
            ((dic.main_user_dic[message.from_user.id]['mtr_objekt']),))
        res = str(c.fetchall()).count('None')
        if res == 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üü¢'
        elif 3 > res > 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üü°'
        elif res == 3:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üî¥'

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç—É
        c.execute(
            f"""SELECT DC, DCP, doc_date_from, doc_date_to FROM {dic.main_user_dic[message.from_user.id]['table']} WHERE mtr_objekt = ?""",
            ((dic.main_user_dic[message.from_user.id]['mtr_objekt']),))
        res = str(c.fetchall()).count('None')
        if res == 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üü¢'
        elif 4 > res > 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üü°'
        elif res == 4:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üî¥'

        # db.commit()
        db.close()

        check_menu_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in ['–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']:
            btn1 = telebot.types.KeyboardButton(
                f"{dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i]} {i}")
            check_menu_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        check_menu_markup.add(btn1)

        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É'
        bot.send_message(message.from_user.id, mess, reply_markup = check_menu_markup)
        bot.register_next_step_handler(message, menu)
    else:
        mess = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.markup_clear)
        get_name(message)


# –ß–ï–ö–ë–û–ö–°–´ –ü–†–û–í–ï–†–û–ö
def menu(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text[2:] == '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ':
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        VC_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']]:
            if dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                btn1 = telebot.types.KeyboardButton(f'üî¥ {i}')
                VC_markup.add(btn1)
            elif dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                btn1 = telebot.types.KeyboardButton(f'üü¢ {i}')
                VC_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        btn2 = telebot.types.KeyboardButton('–¥–∞–ª–µ–µ ‚û°Ô∏è')
        VC_markup.add(btn1, btn2)

        bot.send_message(message.from_user.id, mess, reply_markup = VC_markup)
        bot.register_next_step_handler(message, VC_menu)

    elif message.text[2:] == '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è':
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        DC_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']]:
            if dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                btn1 = telebot.types.KeyboardButton(f'üî¥ {i}')
                DC_markup.add(btn1)
            elif dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                btn1 = telebot.types.KeyboardButton(f'üü¢ {i}')
                DC_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        btn2 = telebot.types.KeyboardButton('–¥–∞–ª–µ–µ ‚û°Ô∏è')
        DC_markup.add(btn1, btn2)

        bot.send_message(message.from_user.id, mess, reply_markup = DC_markup)
        bot.register_next_step_handler(message, DC_menu)

    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        get_name(message)
    else:
        mess = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.markup_clear)
        get_objekt(message)


# –ß–ï–ö–ë–û–ö–° VC
def VC_menu(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text != '‚¨Ö –Ω–∞–∑–∞–¥' and message.text != '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        VC_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']]:
            if message.text[2:] == i:
                if dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                    dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] = True
                elif dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                    dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] = False
            if dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                btn1 = telebot.types.KeyboardButton(f'üî¥ {i}')
                VC_markup.add(btn1)
            elif dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                btn1 = telebot.types.KeyboardButton(f'üü¢ {i}')
                VC_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        btn2 = telebot.types.KeyboardButton('–¥–∞–ª–µ–µ ‚û°Ô∏è')
        VC_markup.add(btn1, btn2)
        mess = '—á—Ç–æ-—Ç–æ –µ—â–µ?'
        bot.send_message(message.from_user.id, mess, reply_markup = VC_markup)
        bot.register_next_step_handler(message, VC_menu)

    elif message.text == '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–µ–∫–±–æ–∫—Å –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['VC'] = []
        for i in dic.name_VC:
            if dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                dic.main_user_dic[message.from_user.id]['VC'].append(i)

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ –ë–î
        c.execute(
            f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_name = ? WHERE mtr_objekt = ?""",
            (dic.main_user_dic[message.from_user.id]['user_name'],
             dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_id = ? WHERE mtr_objekt = ?""",
                  (dic.main_user_dic[message.from_user.id]['user_id'],
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))

        for i in dic.main_user_dic[message.from_user.id]['VC']:
            c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET VC = ? WHERE mtr_objekt = ?""",
                      (f'{i}\n', dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        db.commit()
        db.close()

        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–ª–∞–¥–∞'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.sklad)
        bot.register_next_step_handler(message, get_sklad)

    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–µ–∫–±–æ–∫—Å –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['VC'] = []
        for i in dic.name_VC:
            if dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                dic.main_user_dic[message.from_user.id]['VC'].append(i)

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET VC = ? WHERE mtr_objekt = ?""",
                  (str(dic.main_user_dic[message.from_user.id]['VC']),
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ë–î —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        c.execute(
            f"""SELECT VC, VCP, sklad FROM {dic.main_user_dic[message.from_user.id]['table']} WHERE mtr_objekt = ?""",
            ((dic.main_user_dic[message.from_user.id]['mtr_objekt']),))
        res = str(c.fetchall()).count('None')
        if res == 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üü¢'
        elif 3 > res > 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üü°'
        elif res == 3:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üî¥'

        c.execute(
            f"""SELECT DC, DCP, doc_date_from, doc_date_to FROM {dic.main_user_dic[message.from_user.id]['table']} WHERE mtr_objekt = ?""",
            ((dic.main_user_dic[message.from_user.id]['mtr_objekt']),))
        res = str(c.fetchall()).count('None')
        if res == 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üü¢'
        elif 4 > res > 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üü°'
        elif res == 4:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üî¥'

        db.commit()
        db.close()

        check_menu_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']]:
            btn1 = telebot.types.KeyboardButton(
                f"{dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i]} {i}")
            check_menu_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        check_menu_markup.add(btn1)

        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É'
        bot.send_message(message.from_user.id, mess, reply_markup = check_menu_markup)
        bot.register_next_step_handler(message, menu)


# –ó–ê–ü–ò–°–´–í–ê–ï–ú –¢–ò–ü –°–ö–õ–ê–î–ê
def get_sklad(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text != '‚¨Ö –Ω–∞–∑–∞–¥' and message.text != '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['sklad'] = message.text

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ –ë–î
        c.execute(
            f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_name = ? WHERE mtr_objekt = ?""",
            (dic.main_user_dic[message.from_user.id]['user_name'],
             dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_id = ? WHERE mtr_objekt = ?""",
                  (dic.main_user_dic[message.from_user.id]['user_id'],
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))

        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET sklad = ? WHERE mtr_objekt = ?""",
                  (dic.main_user_dic[message.from_user.id]['sklad'],
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        db.commit()
        db.close()

        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –ú–¢–†'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_VCP)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        VC_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']]:
            if message.text[2:] == i:
                if dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                    dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] = True
                elif dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                    dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] = False

            if dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                btn1 = telebot.types.KeyboardButton(f'üî¥ {i}')
                VC_markup.add(btn1)
            elif dic.VC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                btn1 = telebot.types.KeyboardButton(f'üü¢ {i}')
                VC_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        btn2 = telebot.types.KeyboardButton('–¥–∞–ª–µ–µ ‚û°Ô∏è')
        VC_markup.add(btn1, btn2)
        mess = '—á—Ç–æ-—Ç–æ –µ—â–µ?'
        bot.send_message(message.from_user.id, mess, reply_markup = VC_markup)
        bot.register_next_step_handler(message, VC_menu)
    elif message.text == '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –ú–¢–†'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        # bot.register_next_step_handler(message, get_VCP)
        bot.register_next_step_handler(message, photo)


@bot.message_handler(content_types = ['photo'])
def photo(message):
    mtr_objekt = dic.main_user_dic[message.from_user.id]['mtr_objekt']
    if not str(mtr_objekt) in os.listdir():
        os.mkdir(str(mtr_objekt))

    fileID = message.photo[-1].file_id
    file_info = bot.get_file(fileID)
    downloaded_file = bot.download_file(file_info.file_path)
    dic.photo_count += 1
    with open(f"{mtr_objekt}/img_{dic.photo_count}.jpg", 'wb') as new_file:
        new_file.write(downloaded_file)

    mess = '—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!'
    bot.send_message(message.from_user.id, mess, reply_markup = markup.photo_add)
    bot.register_next_step_handler(message, get_VCP)


# –§–û–¢–û –ú–¢–†
def get_VCP(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        photo(message)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–ª–∞–¥–∞'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.sklad)
        bot.register_next_step_handler(message, get_sklad)
    elif message.text == '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        get_name(message)


# –ß–ï–ö–ë–û–ö–° DC
def DC_menu(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text != '‚¨Ö –Ω–∞–∑–∞–¥' and message.text != '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        DC_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']]:
            if message.text[2:] == i:
                if dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                    dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] = True
                elif dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                    dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] = False

            if dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                btn1 = telebot.types.KeyboardButton(f'üî¥ {i}')
                DC_markup.add(btn1)
            elif dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                btn1 = telebot.types.KeyboardButton(f'üü¢ {i}')
                DC_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        btn2 = telebot.types.KeyboardButton('–¥–∞–ª–µ–µ ‚û°Ô∏è')
        DC_markup.add(btn1, btn2)
        mess = '—á—Ç–æ-—Ç–æ –µ—â–µ?'
        bot.send_message(message.from_user.id, mess, reply_markup = DC_markup)
        bot.register_next_step_handler(message, DC_menu)

    elif message.text == '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–µ–∫–±–æ–∫—Å –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['DC'] = []
        for i in dic.name_DC:
            if dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                dic.main_user_dic[message.from_user.id]['DC'].append(i)

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ –ë–î
        c.execute(
            f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_name = ? WHERE mtr_objekt = ?""",
            (dic.main_user_dic[message.from_user.id]['user_name'],
             dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_id = ? WHERE mtr_objekt = ?""",
                  (dic.main_user_dic[message.from_user.id]['user_id'],
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))

        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET DC = ? WHERE mtr_objekt = ?""",
                  (str(dic.main_user_dic[message.from_user.id]['DC']),
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        db.commit()
        db.close()

        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_doc_date_from)

    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–µ–∫–±–æ–∫—Å –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['DC'] = []
        for i in dic.name_DC:
            if dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                dic.main_user_dic[message.from_user.id]['DC'].append(i)

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET DC = ? WHERE mtr_objekt = ?""",
                  (str(dic.main_user_dic[message.from_user.id]['DC']),
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ë–î —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        c.execute(
            f"""SELECT VC, VCP, sklad FROM {dic.main_user_dic[message.from_user.id]['table']} WHERE mtr_objekt = ?""",
            ((dic.main_user_dic[message.from_user.id]['mtr_objekt']),))
        res = str(c.fetchall()).count('None')
        if res == 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üü¢'
        elif 3 > res > 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üü°'
        elif res == 3:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'] = 'üî¥'

        c.execute(
            f"""SELECT DC, DCP, doc_date_from, doc_date_to FROM {dic.main_user_dic[message.from_user.id]['table']} WHERE mtr_objekt = ?""",
            ((dic.main_user_dic[message.from_user.id]['mtr_objekt']),))
        res = str(c.fetchall()).count('None')
        if res == 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üü¢'
        elif 4 > res > 0:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üü°'
        elif res == 4:
            dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][
                '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = 'üî¥'

        db.commit()
        db.close()

        check_menu_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']]:
            btn1 = telebot.types.KeyboardButton(
                f"{dic.check_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i]} {i}")
            check_menu_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        check_menu_markup.add(btn1)

        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É'
        bot.send_message(message.from_user.id, mess, reply_markup = check_menu_markup)
        bot.register_next_step_handler(message, menu)


# –î–ê–¢–ê –ò–ó–ì–û–¢–û–í–õ–ï–ù–ò–Ø
def get_doc_date_from(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text != '‚¨Ö –Ω–∞–∑–∞–¥' and message.text != '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['doc_date_from'] = message.text

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ –ë–î
        c.execute(
            f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_name = ? WHERE mtr_objekt = ?""",
            (dic.main_user_dic[message.from_user.id]['user_name'],
             dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_id = ? WHERE mtr_objekt = ?""",
                  (dic.main_user_dic[message.from_user.id]['user_id'],
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))

        c.execute(
            f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET doc_date_from = ? WHERE mtr_objekt = ?""",
            (dic.main_user_dic[message.from_user.id]['doc_date_from'],
             dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        db.commit()
        db.close()

        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_doc_date_to)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        DC_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        for i in dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']]:
            if message.text[2:] == i:
                if dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                    dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] = True
                elif dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                    dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] = False

            if dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == False:
                btn1 = telebot.types.KeyboardButton(f'üî¥ {i}')
                DC_markup.add(btn1)
            elif dic.DC_dic[message.from_user.id][dic.main_user_dic[message.from_user.id]['mtr_objekt']][i] == True:
                btn1 = telebot.types.KeyboardButton(f'üü¢ {i}')
                DC_markup.add(btn1)

        btn1 = telebot.types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        btn2 = telebot.types.KeyboardButton('–¥–∞–ª–µ–µ ‚û°Ô∏è')
        DC_markup.add(btn1, btn2)
        mess = '—á—Ç–æ-—Ç–æ –µ—â–µ?'
        bot.send_message(message.from_user.id, mess, reply_markup = DC_markup)
        bot.register_next_step_handler(message, DC_menu)
    elif message.text == '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_doc_date_to)


# –°–†–û–ö –ì–û–î–ù–û–°–¢–ò
def get_doc_date_to(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text != '‚¨Ö –Ω–∞–∑–∞–¥' and message.text != '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['doc_date_to'] = message.text

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ –ë–î
        c.execute(
            f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_name = ? WHERE mtr_objekt = ?""",
            (dic.main_user_dic[message.from_user.id]['user_name'],
             dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_id = ? WHERE mtr_objekt = ?""",
                  (dic.main_user_dic[message.from_user.id]['user_id'],
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))

        c.execute(
            f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET doc_date_to = ? WHERE mtr_objekt = ?""",
            (dic.main_user_dic[message.from_user.id]['doc_date_to'],
             dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        db.commit()
        db.close()

        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_DCP)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_doc_date_from)
    elif message.text == '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_DCP)


# –§–û–¢–û –î–û–ö–£–ú–ï–ù–¢–û–í
def get_DCP(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text != '‚¨Ö –Ω–∞–∑–∞–¥' and message.text != '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        DCP_ID = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        dic.main_user_dic[message.from_user.id]['DCP'] = []
        dic.main_user_dic[message.from_user.id]['DCP'].append(DCP_ID)

        db = sqlite3.connect('db/mtr_bot.db', check_same_thread = False)
        c = db.cursor()

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ –ë–î
        c.execute(
            f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_name = ? WHERE mtr_objekt = ?""",
            (dic.main_user_dic[message.from_user.id]['user_name'],
             dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET user_id = ? WHERE mtr_objekt = ?""",
                  (dic.main_user_dic[message.from_user.id]['user_id'],
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))

        c.execute(f"""UPDATE {dic.main_user_dic[message.from_user.id]['table']} SET DCP = ? WHERE mtr_objekt = ?""",
                  (str(dic.main_user_dic[message.from_user.id]['DCP']),
                   dic.main_user_dic[message.from_user.id]['mtr_objekt']))
        db.commit()
        db.close()

        mess = '—Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_DCP)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.twix)
        bot.register_next_step_handler(message, get_doc_date_to)
    elif message.text == '–¥–∞–ª–µ–µ ‚û°Ô∏è':
        get_name(message)


bot.polling(non_stop = True, interval = 0)
