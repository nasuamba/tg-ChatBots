from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import telebot, config, markup, dic, sqlite3, smtplib, func
from telebot import types
import pandas as pd
import openpyxl
import os


bot = telebot.TeleBot(config.BOT_TOKEN, skip_pending = True)


@bot.message_handler(commands = ["start"])
def start(message):
    
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
    dic.user_dic[message.from_user.id] = {i: '-' for i in dic.user_lst}
    dic.user_dic[message.from_user.id]['id'] = message.from_user.id
    dic.user_dic[message.from_user.id]['–∏–º—è'] = message.from_user.first_name
    dic.user_dic[message.from_user.id]['—Ñ–∞–º–∏–ª–∏—è'] = message.from_user.last_name
    # —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
    dic.bot_dic[message.from_user.id] = {i: '-' for i in dic.bot_lst}
    dic.bot_dic[message.from_user.id]['–ø–∞—Ä–æ–ª—å'] = False

    mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîí'
    bot.send_message(message.from_user.id, mess, reply_markup = markup.pswd_markup)
    bot.register_next_step_handler(message, verification)


@bot.message_handler(commands = ["instruction"])
def instruction(message):
    mess = dic.instr
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup = markup.simple_back_markup)
    if dic.bot_dic[message.from_user.id]['–ø–∞—Ä–æ–ª—å']:
        mess = '–∫–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    else:
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîí'
        bot.send_message(message.chat.id, mess, reply_markup = markup.pswd_markup)
        bot.register_next_step_handler(message, verification)


@bot.message_handler(commands = ["help"])
def help(message):
    mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üì®'
    bot.send_message(message.from_user.id, mess, reply_markup = markup.simple_back_markup)
    bot.register_next_step_handler(message, get_help_msg)
    
def get_help_msg(message):
    if message.text != '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = f'–±–æ—Ç: @GPNS_expert_bot' \
               f'\nnuser id: {message.from_user.id}' \
               f'\n' \
               f'\n—Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}'
        to_chat_id = 'test'
        bot.send_message(to_chat_id, mess)

        mess = '—Å–ø–∞—Å–∏–±–æ üôè' \
               '\n–º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'
        bot.send_message(message.from_user.id, mess, reply_markup = markup.simple_back_markup)
        if dic.bot_dic[message.from_user.id]['–ø–∞—Ä–æ–ª—å']:
            mess = '–∫–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
            bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
            bot.register_next_step_handler(message, get_need)
        else:
            mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîí'
            bot.send_message(message.chat.id, mess, reply_markup = markup.pswd_markup)
            bot.register_next_step_handler(message, verification)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥' and dic.bot_dic[message.from_user.id]['–ø–∞—Ä–æ–ª—å']:
        mess = '–∫–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    else:
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å üîí'
        bot.send_message(message.chat.id, mess, reply_markup = markup.pswd_markup)
        bot.register_next_step_handler(message, verification)


# —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
comand_list = {'/start': start, '/help': help, '/instruction': instruction}


def verification(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '19':
        dic.bot_dic[message.from_user.id]['–ø–∞—Ä–æ–ª—å'] = True
        mess = '–∫–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    elif message.text == '—è –Ω–µ –∑–Ω–∞—é –ø–∞—Ä–æ–ª—å üòü':
        comand_list['/help'](message)
    else:
        mess = '–ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π üîí\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
        bot.send_message(message.chat.id, mess, reply_markup = markup.pswd_markup)
        bot.register_next_step_handler(message, verification)


def get_need(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif config.is_part_in_list(message.text, dic.need_lst):
        dic.user_dic[message.from_user.id]['–∑–∞–¥–∞—á–∞'] = message.text

        db = sqlite3.connect('db/misha_bot.db', check_same_thread=False)
        c = db.cursor()
        c.execute('INSERT INTO user_info (ID, –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –∑–∞–¥–∞—á–∞) VALUES (?, ?, ?, ?)',
        (dic.user_dic[message.from_user.id]['id'], dic.user_dic[message.from_user.id]['–∏–º—è'], dic.user_dic[message.from_user.id]['—Ñ–∞–º–∏–ª–∏—è'], dic.user_dic[message.from_user.id]['–∑–∞–¥–∞—á–∞'])); 
        db.commit()
        db.close()

        if message.text == '–∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üîç':
            mess = '<u>–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞</u>' \
                   '\n' \
                   '\n–ø–æ —Ä–æ–ª–∏: –§–ò–û/–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏/–∑–∞–º—ã' \
                   '\n' \
                   '\n–ø–æ –∏–º–µ–Ω–∏: —Ä–æ–ª—å, –¥–∏–≤–∏–∑–∏–æ–Ω, —ç—Ç–∞–ø'
            bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup = markup.search_markup)
            bot.register_next_step_handler(message, info_search)
        elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
            mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
            bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
            bot.register_next_step_handler(message, get_need)
        elif message.text == '–ø–æ–¥–æ–±—Ä–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ üíº':
            mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–≤–∏–∑–∏–æ–Ω (–∑–∞–∫–∞–∑—á–∏–∫–∞)'
            bot.send_message(message.chat.id, mess, reply_markup = markup.division_markup)
            bot.register_next_step_handler(message, get_division_Excel)
        elif message.text == '–ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ –ø–æ—á—Ç—É üì©':
            mess = f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É\n–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞'
            bot.send_message(message.chat.id, mess, reply_markup = markup.email_markup)
            bot.register_next_step_handler(message, send_full_matrix_mail)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)

def info_search(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '–ø–æ–∏—Å–∫ –ø–æ —Ä–æ–ª–∏':
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–≤–∏–∑–∏–æ–Ω:'
        bot.send_message(message.chat.id, mess, reply_markup = markup.division_markup)
        bot.register_next_step_handler(message, get_division)
    elif message.text == '–ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏':
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.exp_list_markup)
        bot.register_next_step_handler(message, get_exp_name)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)


def get_division_Excel(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif config.is_part_in_list(message.text, dic.divisions):
        dic.bot_dic[message.from_user.id]['Excel_–¥–∏–≤–∏–∑–∏–æ–Ω'] = message.text
        mess = '–Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–∫—É–ø–∫–∞?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.step_markup_2)
        bot.register_next_step_handler(message, get_step_Excel)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ –¥–∏–≤–∏–∑–∏–æ–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.division_markup)
        bot.register_next_step_handler(message, get_division_Excel)


def get_step_Excel(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif config.is_part_in_list(message.text, dic.steps):
        dic.bot_dic[message.from_user.id]['Excel_—ç—Ç–∞–ø'] = message.text
    
        db = sqlite3.connect('db/misha_bot.db', check_same_thread=False)
        c = db.cursor()
        c.execute("""SELECT * FROM exp_frame WHERE division = ? AND step = ?""", 
                 (dic.bot_dic[message.from_user.id]['Excel_–¥–∏–≤–∏–∑–∏–æ–Ω'], dic.bot_dic[message.from_user.id]['Excel_—ç—Ç–∞–ø']))
        df = c.fetchall()

        for i in df:
            c.execute("""INSERT INTO for_send (division, name, role, step, to_do) VALUES (?, ?, ?, ?, ?)""", i)

        db.commit()
        
        mess_1 = f'üß≠ –¥–∏–≤–∏–∑–∏–æ–Ω: {df[0][0]}' \
                  '\n' \
                 f'\nüìÖ —ç—Ç–∞–ø: {df[0][3][3:]}' \
                  '\n'
        mess_2 = ''
        for i in range(len(df)):
            mess_2 += f'\nüë§ {df[i][2]}\n({df[i][1]})'
        
        bot.send_message(message.chat.id, mess_1)
        bot.send_message(message.chat.id, mess_2, reply_markup = markup.back_markup)

        path_file = f"{message.from_user.id}/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞.xlsx"
        if not str(message.from_user.id) in os.listdir(): 
            os.mkdir(str(message.from_user.id))
     
        with pd.ExcelWriter(path_file) as writer:
            doc = pd.read_sql("""SELECT * FROM for_send""", db)
            doc.to_excel(writer, sheet_name = "–º–∞—Ç—Ä–∏—Ü–∞", header = dic.hdr, index = False)
            sn = writer.sheets['–º–∞—Ç—Ä–∏—Ü–∞']
            for i,j in {'A': 20, 'B': 40, 'C': 60, 'D': 40, 'E': 100}.items():
                sn.column_dimensions[i].width = j
            writer.save()
    
        # —á–∏—Å—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î
        c.execute("""DELETE FROM for_send;""")
        db.commit()
        db.close()

        bot.register_next_step_handler(message, instead_Excel)

    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)

    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–≤–∏–∑–∏–æ–Ω (–∑–∞–∫–∞–∑—á–∏–∫–∞)'
        bot.send_message(message.chat.id, mess, reply_markup = markup.division_markup)
        bot.register_next_step_handler(message, get_division_Excel)
    
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.step_markup_2)
        bot.register_next_step_handler(message, get_step_Excel)

def instead_Excel(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–∫—É–ø–∫–∞?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.step_markup_2)
        bot.register_next_step_handler(message, get_step_Excel)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)

# def send_user_matrix(message):
#     if message.text in comand_list:
#         comand_list[message.text](message)
#     elif message.text == '–ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –ø–æ—á—Ç—É üì©':
#         # if message.text == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É –≤ —á–∞—Ç':
#         #     # –ø–æ–¥–∫–ª—é—á–∞–µ–º –ë–î
#         #     db = sqlite3.connect('db/misha_bot.db', check_same_thread=False)
#         #     c = db.cursor()
#         #     # –æ—Ç–∫—Ä—ã–≤–∞–µ–º Excel
#         #     doc = open(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞ {message.from_user.id}.xlsx", "rb")
#         #     bot.send_document(message.chat.id, doc)
#         #     # —á–∏—Å—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ –ë–î
#         #     c.execute("""DELETE FROM for_send;""")
#         #     db.commit()
#         #     db.close()
#         #     mess = '—è –º–æ–≥—É —á–µ–º-—Ç–æ –µ—â–µ –≤–∞–º –ø–æ–º–æ—á—å?'
#         #     bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
#         #     bot.register_next_step_handler(message, get_need)
#         mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É'
#         bot.send_message(message.chat.id, mess, reply_markup = markup.email_markup)
#         bot.register_next_step_handler(message, send_matrix_mail)

#     elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
#         db = sqlite3.connect('db/misha_bot.db', check_same_thread=False)
#         c = db.cursor()
#         # —á–∏—Å—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ –ë–î
#         c.execute("""DELETE FROM for_send;""")
#         db.commit()
#         db.close()
#         mess = '–Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–∫—É–ø–∫–∞?'
#         bot.send_message(message.chat.id, mess, reply_markup = markup.step_markup_2)
#         bot.register_next_step_handler(message, get_step_Excel)

#     elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
#         mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
#         bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
#         bot.register_next_step_handler(message, get_need)
#     else:
#         mess = f'—Ç–∞–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
#                 '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
#         bot.send_message(message.chat.id, mess, reply_markup = markup.sending_markup)
#         bot.register_next_step_handler(message, send_user_matrix)

# def send_matrix_mail(message):
#     if message.text in comand_list:
#         comand_list[message.text](message)
#     elif '@' in message.text:
#         if str(message.text)[-16:] == '@gazprom-neft.ru':
#             # –ø–æ–ª—É—á–∞–µ–º mail
#             dic.bot_dic[message.from_user.id]['mail'] = message.text

#             my_msg = MIMEMultipart()
#             my_msg['To'] = dic.bot_dic[message.from_user.id]['mail']
#             my_msg['From'] = config.FROM_EMAIL
#             my_msg['Subject'] = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞'
#             mess = ''
#             my_msg.attach(MIMEText(mess))
#             my_msg["Accept-Charset"]="utf-8"
#             att  =  MIMEApplication(open(f"{message.from_user.id}/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞.xlsx",'rb').read(),'utf-8')
#             att.add_header('Content-Disposition', 'attachment',
#                         filename = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞.xlsx")
#             my_msg.attach(att)

#             try:
#                 mailserver = smtplib.SMTP_SSL(config.Y_SERVER, config.Y_PORT)
#                 mailserver.ehlo()
#                 mailserver.login(config.Y_LOGIN, config.MY_PASSWORD)
#                 mailserver.sendmail(config.FROM_EMAIL, dic.bot_dic[message.from_user.id]['mail'], my_msg.as_string())
#                 mailserver.quit()
#                 mess = f"–ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {dic.bot_dic[message.from_user.id]['mail']}"
#                 bot.send_message(message.chat.id, mess, reply_markup = markup.simple_back_markup)
#                 bot.register_next_step_handler(message, get_help_msg)
#             except:
#                 mess = "–≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ãüòÆ" \
#                       f"\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã: {dic.bot_dic[message.from_user.id]['mail']}"
#                 bot.send_message(message.chat.id, mess, reply_markup = markup.remail_markup)
#                 bot.register_next_step_handler(message, add_matrix_mail)
#         else:
#             mess = "–ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—Å—è –Ω–∞ '@gazprom-neft.ru'"
#             bot.send_message(message.chat.id, mess, reply_markup = markup.remail_markup)
#             bot.register_next_step_handler(message, add_matrix_mail)
#     else:
#         mess = "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
#         bot.send_message(message.chat.id, mess, reply_markup = markup.remail_markup)
#         bot.register_next_step_handler(message, add_matrix_mail)

# def add_matrix_mail(message):
#     if message.text in comand_list:
#         comand_list[message.text](message)
#     elif message.text == '–≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑':
#         mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É'
#         bot.send_message(message.chat.id, mess, reply_markup = markup.markup_clear)
#         bot.register_next_step_handler(message, send_matrix_mail)
#     elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
#         mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
#         bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
#         bot.register_next_step_handler(message, get_need)
#     else:
#         mess = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
#         bot.send_message(message.chat.id, mess, reply_markup = markup.remail_markup)
#         bot.register_next_step_handler(message, add_matrix_mail)

def send_full_matrix_mail(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    elif '@' in message.text:
        if str(message.text)[-16:] == '@gazprom-neft.ru':
            # –ø–æ–ª—É—á–∞–µ–º mail
            dic.bot_dic[message.from_user.id]['mail'] = message.text

            my_msg = MIMEMultipart()
            my_msg['To'] = dic.bot_dic[message.from_user.id]['mail']
            my_msg['From'] = config.FROM_EMAIL
            my_msg['Subject'] = '–º–∞—Ç—Ä–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤'
            mess = u'<a href="file:///H:\–æ–±—â–∞—è –ø–∞–ø–∫–∞\13_–û–¢–ü\–º–∞—Ç—Ä–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤">–º–∞—Ç—Ä–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤</a> –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—â–µ–π –ø–∞–ø–∫–µ'
            my_msg.attach(MIMEText(mess, 'html'))
            my_msg["Accept-Charset"]="utf-8"
            # att  =  MIMEApplication(open('–º–∞—Ç—Ä–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.xlsm','rb').read(),'utf-8')
            # att.add_header('Content-Disposition', 'attachment',
            #             filename = '–º–∞—Ç—Ä–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.xlsm')
            # my_msg.attach(att)

            try:
                mailserver = smtplib.SMTP_SSL(config.Y_SERVER, config.Y_PORT)
                mailserver.ehlo()
                mailserver.login(config.Y_LOGIN, config.MY_PASSWORD)
                mailserver.sendmail(config.FROM_EMAIL, dic.bot_dic[message.from_user.id]['mail'], my_msg.as_string())
                mailserver.quit()
                mess = f"–ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {dic.bot_dic[message.from_user.id]['mail']}" \
                       f"\n—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç ‚è±"
                bot.send_message(message.chat.id, mess, reply_markup = markup.simple_back_markup)
                bot.register_next_step_handler(message, send_full_matrix_mail)
            except:
                mess = f"–≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ {dic.bot_dic[message.from_user.id]['mail']}" \
                      f"\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞"
                bot.send_message(message.chat.id, mess, reply_markup = markup.email_markup)
                bot.register_next_step_handler(message, send_full_matrix_mail)
        else:
            mess = "–ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—Å—è –Ω–∞ @gazprom-neft.ru" \
                  f"\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞"
            bot.send_message(message.chat.id, mess, reply_markup = markup.email_markup)
            bot.register_next_step_handler(message, send_full_matrix_mail)
    else:
        mess = "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é..." \
              f"\n–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞"
        bot.send_message(message.chat.id, mess, reply_markup = markup.email_markup)
        bot.register_next_step_handler(message, send_full_matrix_mail)


def get_division(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif config.is_part_in_list(message.text, dic.divisions):
        dic.bot_dic[message.from_user.id]['–¥–∏–≤–∏–∑–∏–æ–Ω'] = message.text
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å'
        bot.send_message(message.chat.id, mess, reply_markup = markup.role_list_markup)
        bot.register_next_step_handler(message, get_role)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '<u>–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞</u>' \
               '\n' \
               '\n–ø–æ —Ä–æ–ª–∏: –§–ò–û/–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏/–∑–∞–º—ã' \
               '\n' \
               '\n–ø–æ –∏–º–µ–Ω–∏: —Ä–æ–ª—å, –¥–∏–≤–∏–∑–∏–æ–Ω, —ç—Ç–∞–ø'
        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup = markup.search_markup)
        bot.register_next_step_handler(message, info_search)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ –¥–∏–≤–∏–∑–∏–æ–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.division_markup)
        bot.register_next_step_handler(message, get_division)


def get_role(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif config.is_part_in_list(message.text, dic.role):
        dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å'] = message.text
        mess = '–Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–∫—É–ø–∫–∞?'

        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute("SELECT step FROM exp_by_steps WHERE role = ?", ((dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å']),))
        step_list_s = c.fetchall()
        db.close()
        
        # —Å–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        step_markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        btn1 = types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        btn2 = types.KeyboardButton('–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
        step_markup.add(btn1, btn2)
        for i in step_list_s:
            btn1 = types.KeyboardButton(str(i)[2:-3])
            step_markup.add(btn1)
        
        bot.send_message(message.chat.id, mess, reply_markup = step_markup)
        bot.register_next_step_handler(message, get_step)
    
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)

    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–≤–∏–∑–∏–æ–Ω:'
        bot.send_message(message.chat.id, mess, reply_markup = markup.division_markup)
        bot.register_next_step_handler(message, get_division)
    else:
        mess = f'—Ç–∞–∫–æ–π —Ä–æ–ª–∏ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.role_list_markup)
        bot.register_next_step_handler(message, get_role)


def get_exp_name(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif config.is_part_in_list(message.text, dic.nm_lst):
        dic.bot_dic[message.from_user.id]['–∏–º—è'] = message.text

        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()

        c.execute(f"SELECT role FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_role = set(c.fetchall())
        c.execute(f"SELECT division FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_division = set(c.fetchall())
        c.execute(f"SELECT step FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_steps = set(c.fetchall())

        db.close()

        mess_1 = '<b>üë§ –≤–∞—à–∞ —Ä–æ–ª—å:</b>'
        for i in your_role:
            x = str(i)[2:-3]
            mess_1 += f'\n- {x}'
        mess_2 = '<b>üß≠ –≤—ã –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –≤ –¥–∏–≤–∏–∑–∏–æ–Ω–∞—Ö:</b>'
        for i in your_division:
            x = str(i)[2:-3]
            mess_2 += f'\n- {x}'
        mess_3 = '<b>üìÖ –Ω–∞ —ç—Ç–∞–ø–∞—Ö:</b>'
        for i in your_steps:
            x = str(i)[2:-3]
            mess_3 += f'\n- {x[3:]}'

        bot.send_message(message.chat.id, mess_1, parse_mode='html')
        bot.send_message(message.chat.id, mess_2, parse_mode='html')
        bot.send_message(message.chat.id, mess_3, parse_mode='html', reply_markup = markup.what_to_do_markup)
        bot.register_next_step_handler(message, what_to_do_by_name)
    
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)

    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '<u>–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞</u>' \
               '\n' \
               '\n–ø–æ —Ä–æ–ª–∏: –§–ò–û/–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏/–∑–∞–º—ã' \
               '\n' \
               '\n–ø–æ –∏–º–µ–Ω–∏: —Ä–æ–ª—å, –¥–∏–≤–∏–∑–∏–æ–Ω, —ç—Ç–∞–ø'
        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup = markup.search_markup)
        bot.register_next_step_handler(message, info_search)
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.exp_list_markup)
        bot.register_next_step_handler(message, get_exp_name)

def what_to_do_by_name(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.exp_list_markup)
        bot.register_next_step_handler(message, get_exp_name)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    elif message.text == '—á—Ç–æ –¥–æ–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç?':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        
        c.execute(f"SELECT role FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_role = set(c.fetchall())

        if len(your_role) != 1:
            role_markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
            btn1 = types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
            btn2 = types.KeyboardButton('–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
            role_markup.add(btn1, btn2)
            for i in your_role:
                btn1 = types.KeyboardButton(str(i)[2:-3])
                role_markup.add(btn1)
            mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å'
            bot.send_message(message.chat.id, mess, reply_markup = role_markup)
            bot.register_next_step_handler(message, what_to_do_by_name_get_role)

        elif len(your_role) == 1:
            for i in your_role:
                dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å'] = str(i)[2:-3]
                c.execute(f"SELECT step FROM full_exp_frame WHERE name = ? AND role = ?", (dic.bot_dic[message.from_user.id]['–∏–º—è'], str(i)[2:-3]))
                your_steps = set(c.fetchall())
        
            step_markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
            btn1 = types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
            btn2 = types.KeyboardButton('–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
            step_markup.add(btn1, btn2)
            for j in your_steps:
                btn1 = types.KeyboardButton(str(j)[2:-3])
                step_markup.add(btn1)
            mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø'
            bot.send_message(message.from_user.id, mess, reply_markup = step_markup)
            bot.register_next_step_handler(message, what_to_do_by_name_get_step)

        db.close()

    elif message.text == '–∑–∞–º–µ—â–∞—é—â–∏–µ –ª–∏—Ü–∞':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        if dic.bot_dic[message.from_user.id]['–∏–º—è'] == '–õ—å–≤–æ–≤–∞ –ï.–°.':
            c.execute(f"SELECT division FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
            your_division = set(c.fetchall())
        
            mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–≤–∏–∑–∏–æ–Ω'
            div_markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
            btn1 = types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
            btn2 = types.KeyboardButton('–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
            div_markup.add(btn1, btn2)
            for i in your_division:
                btn1 = types.KeyboardButton(str(i)[2:-3])
                div_markup.add(btn1)
            bot.send_message(message.chat.id, mess, reply_markup = div_markup)
            bot.register_next_step_handler(message, what_to_do_by_name_get_div)
        else:
            c.execute("SELECT zam FROM alternate WHERE name = ?",
                     ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
            zam_lst = set(c.fetchall())
            mess = ''
            for i in zam_lst:
                mess = mess + f'üë§ {str(i)[2:-3]}\n'
            bot.send_message(message.chat.id, mess, reply_markup = markup.back_markup)
            bot.register_next_step_handler(message, what_to_do_by_name_repeat)

        db.close()



    else:
        mess = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup = markup.back_markup)
        bot.register_next_step_handler(message, what_to_do_by_name)

def what_to_do_by_name_get_role(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()

        c.execute(f"SELECT role FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_role = set(c.fetchall())
        c.execute(f"SELECT division FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_division = set(c.fetchall())
        c.execute(f"SELECT step FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_steps = set(c.fetchall())

        db.close()

        mess_1 = '<b>üë§ –≤–∞—à–∞ —Ä–æ–ª—å:</b>'
        for i in your_role:
            x = str(i)[2:-3]
            mess_1 += f'\n- {x}'
        mess_2 = '<b>üß≠ –≤—ã –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –≤ –¥–∏–≤–∏–∑–∏–æ–Ω–∞—Ö:</b>'
        for i in your_division:
            x = str(i)[2:-3]
            mess_2 += f'\n- {x}'
        mess_3 = '<b>üìÖ –Ω–∞ —ç—Ç–∞–ø–∞—Ö:</b>'
        for i in your_steps:
            x = str(i)[2:-3]
            mess_3 += f'\n- {x[3:]}'

        bot.send_message(message.chat.id, mess_1, parse_mode='html')
        bot.send_message(message.chat.id, mess_2, parse_mode='html')
        bot.send_message(message.chat.id, mess_3, parse_mode='html', reply_markup = markup.what_to_do_markup)
        bot.register_next_step_handler(message, what_to_do_by_name)
    elif config.is_part_in_list(message.text, dic.role):
        dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å'] = message.text
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute(f"SELECT step FROM full_exp_frame WHERE name = ? AND role = ?",
                 (dic.bot_dic[message.from_user.id]['–∏–º—è'],
                  dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å']))
        your_steps = set(c.fetchall())
        
        step_markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        btn1 = types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        btn2 = types.KeyboardButton('–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†')
        step_markup.add(btn1, btn2)
        for j in your_steps:
            btn1 = types.KeyboardButton(str(j)[2:-3])
            step_markup.add(btn1)
        mess = '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø'
        bot.send_message(message.chat.id, mess, reply_markup = step_markup)
        bot.register_next_step_handler(message, what_to_do_by_name_get_step)

        db.close()

def what_to_do_by_name_get_step(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()

        c.execute(f"SELECT role FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_role = set(c.fetchall())
        c.execute(f"SELECT division FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_division = set(c.fetchall())
        c.execute(f"SELECT step FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_steps = set(c.fetchall())

        db.close()

        mess_1 = '<b>üë§ –≤–∞—à–∞ —Ä–æ–ª—å:</b>'
        for i in your_role:
            x = str(i)[2:-3]
            mess_1 += f'\n- {x}'
        mess_2 = '<b>üß≠ –≤—ã –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –≤ –¥–∏–≤–∏–∑–∏–æ–Ω–∞—Ö:</b>'
        for i in your_division:
            x = str(i)[2:-3]
            mess_2 += f'\n- {x}'
        mess_3 = '<b>üìÖ –Ω–∞ —ç—Ç–∞–ø–∞—Ö:</b>'
        for i in your_steps:
            x = str(i)[2:-3]
            mess_3 += f'\n- {x[3:]}'

        bot.send_message(message.chat.id, mess_1, parse_mode='html')
        bot.send_message(message.chat.id, mess_2, parse_mode='html')
        bot.send_message(message.chat.id, mess_3, parse_mode='html', reply_markup = markup.what_to_do_markup)
        bot.register_next_step_handler(message, what_to_do_by_name)
    elif config.is_part_in_list(message.text, dic.steps):
        dic.bot_dic[message.from_user.id]['—ç—Ç–∞–ø'] = message.text

        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()

        c.execute("SELECT to_do FROM exp_frame WHERE role = ? AND step = ?",
                 (dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å'],
                  dic.bot_dic[message.from_user.id]['—ç—Ç–∞–ø']))
        mess = c.fetchall()
        bot.send_message(message.chat.id, mess, reply_markup = markup.back_markup)

        bot.register_next_step_handler(message, what_to_do_by_name_repeat)


def what_to_do_by_name_get_div(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()

        c.execute(f"SELECT role FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_role = set(c.fetchall())
        c.execute(f"SELECT division FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_division = set(c.fetchall())
        c.execute(f"SELECT step FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_steps = set(c.fetchall())

        db.close()

        mess_1 = '<b>üë§ –≤–∞—à–∞ —Ä–æ–ª—å:</b>'
        for i in your_role:
            x = str(i)[2:-3]
            mess_1 += f'\n- {x}'
        mess_2 = '<b>üß≠ –≤—ã –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –≤ –¥–∏–≤–∏–∑–∏–æ–Ω–∞—Ö:</b>'
        for i in your_division:
            x = str(i)[2:-3]
            mess_2 += f'\n- {x}'
        mess_3 = '<b>üìÖ –Ω–∞ —ç—Ç–∞–ø–∞—Ö:</b>'
        for i in your_steps:
            x = str(i)[2:-3]
            mess_3 += f'\n- {x[3:]}'

        bot.send_message(message.chat.id, mess_1, parse_mode='html')
        bot.send_message(message.chat.id, mess_2, parse_mode='html')
        bot.send_message(message.chat.id, mess_3, parse_mode='html', reply_markup = markup.what_to_do_markup)
        bot.register_next_step_handler(message, what_to_do_by_name)
    elif config.is_part_in_list(message.text, dic.divisions):
        dic.bot_dic[message.from_user.id]['–¥–∏–≤–∏–∑–∏–æ–Ω'] = message.text
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute("SELECT zam FROM alternate WHERE name = ? AND division = ?",
                 (dic.bot_dic[message.from_user.id]['–∏–º—è'],
                  dic.bot_dic[message.from_user.id]['–¥–∏–≤–∏–∑–∏–æ–Ω']))
        zam_lst = c.fetchall()
        mess = ''
        for i in zam_lst:
            mess = mess + f'üë§ {str(i)[2:-3]}\n'
        bot.send_message(message.chat.id, mess, reply_markup = markup.back_markup)
        bot.register_next_step_handler(message, what_to_do_by_name_repeat)

        db.close()


def what_to_do_by_name_repeat(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()

        c.execute(f"SELECT role FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_role = set(c.fetchall())
        c.execute(f"SELECT division FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_division = set(c.fetchall())
        c.execute(f"SELECT step FROM full_exp_frame WHERE name = ?", ((dic.bot_dic[message.from_user.id]['–∏–º—è']),))
        your_steps = set(c.fetchall())

        db.close()

        mess_1 = '<b>üë§ –≤–∞—à–∞ —Ä–æ–ª—å:</b>'
        for i in your_role:
            x = str(i)[2:-3]
            mess_1 += f'\n- {x}'
        mess_2 = '<b>üß≠ –≤—ã –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –≤ –¥–∏–≤–∏–∑–∏–æ–Ω–∞—Ö:</b>'
        for i in your_division:
            x = str(i)[2:-3]
            mess_2 += f'\n- {x}'
        mess_3 = '<b>üìÖ –Ω–∞ —ç—Ç–∞–ø–∞—Ö:</b>'
        for i in your_steps:
            x = str(i)[2:-3]
            mess_3 += f'\n- {x[3:]}'

        bot.send_message(message.chat.id, mess_1, parse_mode='html')
        bot.send_message(message.chat.id, mess_2, parse_mode='html')
        bot.send_message(message.chat.id, mess_3, parse_mode='html', reply_markup = markup.what_to_do_markup)
        bot.register_next_step_handler(message, what_to_do_by_name)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.back_markup)
        bot.register_next_step_handler(message, what_to_do_repeat)


def get_step(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif config.is_part_in_list(message.text, dic.steps):
        dic.bot_dic[message.from_user.id]['—ç—Ç–∞–ø'] = message.text

        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute("SELECT name FROM exp_frame WHERE division = ? AND role = ? AND step = ?",
                  (dic.bot_dic[message.from_user.id]['–¥–∏–≤–∏–∑–∏–æ–Ω'], dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å'], dic.bot_dic[message.from_user.id]['—ç—Ç–∞–ø']))
        mess = f"üë§ {str(c.fetchall())[3:-4]}"
        db.close()
        bot.send_message(message.chat.id, mess, reply_markup = markup.what_to_do_markup)
        bot.register_next_step_handler(message, what_to_do)
    
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)

    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä—Ç–µ —Ä–æ–ª—å'
        bot.send_message(message.chat.id, mess, reply_markup = markup.role_list_markup)
        bot.register_next_step_handler(message, get_role)
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.step_markup_2)
        bot.register_next_step_handler(message, get_step)

def what_to_do(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        mess = '–Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–∫—É–ø–∫–∞?'

        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute("SELECT step FROM exp_by_steps WHERE role = ?", ((dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å']),))
        step_list_s = c.fetchall()
        db.close()
        
        # —Å–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        step_markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
        chars = "(,')"
        for i in step_list_s:
            btn1 = types.KeyboardButton(str(i).translate(str.maketrans('', '', chars)))
            step_markup.add(btn1)
        btn1 = types.KeyboardButton('‚¨Ö –Ω–∞–∑–∞–¥')
        step_markup.add(btn1)

        bot.send_message(message.chat.id, mess, reply_markup = step_markup)
        bot.register_next_step_handler(message, get_step)

    elif message.text == '—á—Ç–æ –¥–æ–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç?':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute("SELECT to_do FROM exp_frame WHERE division = ? AND role = ? AND step = ?",
                  (dic.bot_dic[message.from_user.id]['–¥–∏–≤–∏–∑–∏–æ–Ω'], dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å'], dic.bot_dic[message.from_user.id]['—ç—Ç–∞–ø']))
        mess = c.fetchall()
        db.close()
        bot.send_message(message.chat.id, mess, reply_markup = markup.back_markup)
        bot.register_next_step_handler(message, what_to_do_repeat)

    elif message.text == '–∑–∞–º–µ—â–∞—é—â–∏–µ –ª–∏—Ü–∞':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()

        c.execute("SELECT name FROM exp_frame WHERE division = ? AND role = ? AND step = ?",
                 (dic.bot_dic[message.from_user.id]['–¥–∏–≤–∏–∑–∏–æ–Ω'], dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å'], dic.bot_dic[message.from_user.id]['—ç—Ç–∞–ø']))
        name = str(c.fetchall())[3:-4]

        c.execute("SELECT zam FROM alternate WHERE name = ? AND division = ?",
                 (name, dic.bot_dic[message.from_user.id]['–¥–∏–≤–∏–∑–∏–æ–Ω']))
        zam_lst = c.fetchall()
        db.close()
        mess = ''
        for i in zam_lst:
            mess += f'\nüë§ {str(i)[2:-3]}'

        bot.send_message(message.chat.id, mess, reply_markup = markup.back_markup)
        bot.register_next_step_handler(message, what_to_do_repeat)

    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.what_to_do_markup)
        bot.register_next_step_handler(message, what_to_do)

def what_to_do_repeat(message):
    if message.text in comand_list:
        comand_list[message.text](message)
    elif message.text == '‚¨Ö –Ω–∞–∑–∞–¥':
        db = sqlite3.connect('db/misha_bot.db', check_same_thread = False)
        c = db.cursor()
        c.execute("SELECT name FROM exp_frame WHERE division = ? AND role = ? AND step = ?",
                  (dic.bot_dic[message.from_user.id]['–¥–∏–≤–∏–∑–∏–æ–Ω'], dic.bot_dic[message.from_user.id]['—Ä–æ–ª—å'], dic.bot_dic[message.from_user.id]['—ç—Ç–∞–ø']))
        mess = c.fetchall()
        db.close()
        bot.send_message(message.chat.id, mess, reply_markup = markup.what_to_do_markup)
        bot.register_next_step_handler(message, what_to_do)
    elif message.text == '–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
        mess = '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
        bot.send_message(message.chat.id, mess, reply_markup = markup.start_markup)
        bot.register_next_step_handler(message, get_need)
    else:
        mess = f'—Ç–∞–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Çüòû' \
                '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot.send_message(message.chat.id, mess, reply_markup = markup.back_markup)
        bot.register_next_step_handler(message, what_to_do_repeat)


bot.polling(non_stop = True, interval = 0)